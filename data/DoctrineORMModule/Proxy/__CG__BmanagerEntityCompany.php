<?php

namespace DoctrineORMModule\Proxy\__CG__\Bmanager\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Company extends \Bmanager\Entity\Company implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'Bmanager\\Entity\\Company' . "\0" . 'id', '' . "\0" . 'Bmanager\\Entity\\Company' . "\0" . 'nickName', '' . "\0" . 'Bmanager\\Entity\\Company' . "\0" . 'companyName', '' . "\0" . 'Bmanager\\Entity\\Company' . "\0" . 'cnpj', '' . "\0" . 'Bmanager\\Entity\\Company' . "\0" . 'ie', '' . "\0" . 'Bmanager\\Entity\\Company' . "\0" . 'im', '' . "\0" . 'Bmanager\\Entity\\Company' . "\0" . 'street', '' . "\0" . 'Bmanager\\Entity\\Company' . "\0" . 'number', '' . "\0" . 'Bmanager\\Entity\\Company' . "\0" . 'neighborhood', '' . "\0" . 'Bmanager\\Entity\\Company' . "\0" . 'city', '' . "\0" . 'Bmanager\\Entity\\Company' . "\0" . 'state', '' . "\0" . 'Bmanager\\Entity\\Company' . "\0" . 'cep', '' . "\0" . 'Bmanager\\Entity\\Company' . "\0" . 'email', '' . "\0" . 'Bmanager\\Entity\\Company' . "\0" . 'phone', '' . "\0" . 'Bmanager\\Entity\\Company' . "\0" . 'account', '' . "\0" . 'Bmanager\\Entity\\Company' . "\0" . 'level'];
        }

        return ['__isInitialized__', '' . "\0" . 'Bmanager\\Entity\\Company' . "\0" . 'id', '' . "\0" . 'Bmanager\\Entity\\Company' . "\0" . 'nickName', '' . "\0" . 'Bmanager\\Entity\\Company' . "\0" . 'companyName', '' . "\0" . 'Bmanager\\Entity\\Company' . "\0" . 'cnpj', '' . "\0" . 'Bmanager\\Entity\\Company' . "\0" . 'ie', '' . "\0" . 'Bmanager\\Entity\\Company' . "\0" . 'im', '' . "\0" . 'Bmanager\\Entity\\Company' . "\0" . 'street', '' . "\0" . 'Bmanager\\Entity\\Company' . "\0" . 'number', '' . "\0" . 'Bmanager\\Entity\\Company' . "\0" . 'neighborhood', '' . "\0" . 'Bmanager\\Entity\\Company' . "\0" . 'city', '' . "\0" . 'Bmanager\\Entity\\Company' . "\0" . 'state', '' . "\0" . 'Bmanager\\Entity\\Company' . "\0" . 'cep', '' . "\0" . 'Bmanager\\Entity\\Company' . "\0" . 'email', '' . "\0" . 'Bmanager\\Entity\\Company' . "\0" . 'phone', '' . "\0" . 'Bmanager\\Entity\\Company' . "\0" . 'account', '' . "\0" . 'Bmanager\\Entity\\Company' . "\0" . 'level'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Company $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getNickName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNickName', []);

        return parent::getNickName();
    }

    /**
     * {@inheritDoc}
     */
    public function setNickName($nickName)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNickName', [$nickName]);

        return parent::setNickName($nickName);
    }

    /**
     * {@inheritDoc}
     */
    public function getCompanyName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCompanyName', []);

        return parent::getCompanyName();
    }

    /**
     * {@inheritDoc}
     */
    public function setCompanyName($companyName)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCompanyName', [$companyName]);

        return parent::setCompanyName($companyName);
    }

    /**
     * {@inheritDoc}
     */
    public function getCnpj()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCnpj', []);

        return parent::getCnpj();
    }

    /**
     * {@inheritDoc}
     */
    public function setCnpj($cnpj)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCnpj', [$cnpj]);

        return parent::setCnpj($cnpj);
    }

    /**
     * {@inheritDoc}
     */
    public function getIe()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIe', []);

        return parent::getIe();
    }

    /**
     * {@inheritDoc}
     */
    public function setIe($ie)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIe', [$ie]);

        return parent::setIe($ie);
    }

    /**
     * {@inheritDoc}
     */
    public function getIm()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIm', []);

        return parent::getIm();
    }

    /**
     * {@inheritDoc}
     */
    public function setIm($im)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIm', [$im]);

        return parent::setIm($im);
    }

    /**
     * {@inheritDoc}
     */
    public function getStreet()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStreet', []);

        return parent::getStreet();
    }

    /**
     * {@inheritDoc}
     */
    public function setStreet($street)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStreet', [$street]);

        return parent::setStreet($street);
    }

    /**
     * {@inheritDoc}
     */
    public function getNumber()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNumber', []);

        return parent::getNumber();
    }

    /**
     * {@inheritDoc}
     */
    public function setNumber($number)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNumber', [$number]);

        return parent::setNumber($number);
    }

    /**
     * {@inheritDoc}
     */
    public function getNeighborhood()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNeighborhood', []);

        return parent::getNeighborhood();
    }

    /**
     * {@inheritDoc}
     */
    public function setNeighborhood($neighborhood)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNeighborhood', [$neighborhood]);

        return parent::setNeighborhood($neighborhood);
    }

    /**
     * {@inheritDoc}
     */
    public function getCity()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCity', []);

        return parent::getCity();
    }

    /**
     * {@inheritDoc}
     */
    public function setCity($city)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCity', [$city]);

        return parent::setCity($city);
    }

    /**
     * {@inheritDoc}
     */
    public function getState()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getState', []);

        return parent::getState();
    }

    /**
     * {@inheritDoc}
     */
    public function setState($state)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setState', [$state]);

        return parent::setState($state);
    }

    /**
     * {@inheritDoc}
     */
    public function getCep()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCep', []);

        return parent::getCep();
    }

    /**
     * {@inheritDoc}
     */
    public function setCep($cep)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCep', [$cep]);

        return parent::setCep($cep);
    }

    /**
     * {@inheritDoc}
     */
    public function getEmail()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEmail', []);

        return parent::getEmail();
    }

    /**
     * {@inheritDoc}
     */
    public function setEmail($email)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEmail', [$email]);

        return parent::setEmail($email);
    }

    /**
     * {@inheritDoc}
     */
    public function getPhone()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPhone', []);

        return parent::getPhone();
    }

    /**
     * {@inheritDoc}
     */
    public function setPhone($phone)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPhone', [$phone]);

        return parent::setPhone($phone);
    }

}
